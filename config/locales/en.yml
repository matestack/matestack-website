# Files in the config/locales directory are used for internationalization
# and are automatically loaded by Rails. If you want to use locales other
# than English, add the necessary files in this directory.
#
# To use the locales, use `I18n.t`:
#
#     I18n.t 'hello'
#
# In views, this is aliased to just `t`:
#
#     <%= t('hello') %>
#
# To use a different locale, set it with `I18n.locale`:
#
#     I18n.locale = :es
#
# This would use the information in config/locales/es.yml.
#
# The following keys must be escaped otherwise they will not be retrieved by
# the default I18n backend:
#
# true, false, on, off, yes, no
#
# Instead, surround them with single quotes.
#
# en:
#   'true': 'foo'
#
# To learn more, please read the Rails Internationalization guide
# available at https://guides.rubyonrails.org/i18n.html.

en:
  header:
    logo_alt_text: "matestack"
    nav:
      github: "GitHub"
      docs: "Documentation"
      discord: "Discord Chat"
  footer:
    jonasjabari_link_text: "created by Jonas Jabari"
    imprint_link_text: "Imprint"
    privacy_policy_link_text: "Privacy policy"
  example_slides:
    component_examples:
      slide_1:
        heading: "Implement UI components in pure Ruby"
        text_1: "Create Ruby classes within your Rails project and call matestack's core components through a Ruby DSL in order to craft your UIs."
        text_2: "The Ruby method \"div\" for example calls one of the static core components, responsible for rendering HTML tags. A component can take Strings, Integers, Symbols, Arrays or Hashes (...) as optional properties (e.g. \"title\") or require them (e.g. \"body\")."
      slide_2:
        heading: "Use your Ruby UI components on your existing Rails views"
        text_1: "Register your Ruby UI component classes with your desired DSL method and use the \"matestack_component\" helper in order to render your component within existing ERB views or Rails controllers."
        text_2: "The Ruby method \"card\" for example calls your \"Card\" class, enabling you to create a reuseable card components, abstracting UI complexity in your own components."
      slide_3:
        heading: "Use Ruby methods as partials"
        text_1: "Split your UI implementation into multiple small chunks helping others (and yourself) to better understand your implementation."
        text_2: "Using this approach helps you to create a clean, readable and maintainable codebase."
      slide_4:
        heading: "Use class inheritance"
        text_1: "Because it's just a Ruby class, you can use class inheritance in order to further improve the quality of your UI implementation."
        text_2: "Class inheritance can be used to easily create variants of UI components but still reuse parts of the implementation"
      slide_5:
        heading: "Use components within components"
        text_1: "Just like you used matestack's core components on your own UI component, you can use your own UI components within other custom UI components."
        text_2: "You decide when using a Ruby method partial should be replaced by another self contained UI component!"
      slide_6:
        heading: "Yield components into components"
        text_1: "Sometimes it's not enough to just pass simple data into a component. No worries! You can just yield a block into your components!"
        text_2: "Using this approach gives you more flexibility when using your UI components. Ofcourse yielding can be used alongside passing in simple params."
      slide_7:
        heading: "Use named slots for advanced content injection"
        text_1: "If you need to inject multiple blocks into your UI component, you can use \"slots\"!"
        text_2: "Slots help you to build complex UI components with multiple named content placeholders for highest implementation flexibility!"
    reactivity_examples:
      slide_1:
        heading: "Toggle parts of the UI based on events"
        text_1: "Matestack offers an event hub. Reactive components can emit and receive events through this event hub. \"onclick\" and \"toggle\" calling two of these reactive core components."
        text_2: "\"onclick\" emits an event which causes the body of the \"toggle\" component to be visible for 5 seconds in this example"
      slide_2:
        heading: "Call controller actions without JavaScript"
        text_1: "Core components offer basic dynamic behaviour and let you easily call controller actions and react to server responses on the client side without full page reload."
        text_2: "The \"action\" component is configured to emit an event after successfully performed an HTTP request against a Rails controller action, which is received by the \"toggle\" component, displaying the success message."
      slide_3:
        heading: "Dynamically handle form input without JavaScript"
        text_1: "Create dynamic forms for ActiveRecord Models (or plain objects) and display server side responses, like validation errors or success messages, without relying on a full page reload."
        text_2: "Events emitted by the \"form\" component can be used to toggle parts of the UI."
      slide_4:
        heading: "Implement asynchronous, event-based UI rerendering in pure Ruby"
        text_1: "Using matestack's built-in event system, you can rerender parts of the UI on client side events, such as form or action submissions. Even server side events pushed via ActionCable may be received!"
        text_2: "The \"async\" component requests a new version of its body at the server via an HTTP GET request after receiving the configured event. After successful server response, the DOM of the \"async\" component gets updated. Everything else stays untouched."
      slide_5:
        heading: "Manipulate parts of the UI via ActionCable"
        text_1: "\"async\" rerenders its whole body - but what about just appending the element to the list after successful form submission?"
        text_2: "The \"cable\" component can be configured to receive events and data pushed via ActionCable from the server side and just append/prepend new chunks of HTML (ideally rendered through a component) to the current \"cable\" component body. Updating and deleting is also supported!"
      slide_6:
        heading: "Easily extend with Vue.js"
        text_1: "Matestack's dynamic parts are built on Vue.js. If you want to implement custom dynamic behaviour, you can simply create your own Vue components and use them along matestacks core components."
        text_2: "It's even possible to interact with matestack's core components using the built-in event bus."
    spa_examples:
      slide_1:
        heading: "Create your layouts and views in pure Ruby"
        text_1: "The app class is used to define a layout, usually containing some kind of header, footer and navigation. The page class is used to define a view. Following the same principles as seen on components, you can use components (core or your own) in order to create the UI"
        text_2: "The \"transition\" component enables dynamic page transition, replacing the content within \"yield_page\" with new serverside rendered content."
      slide_2:
        heading: "Apps and pages are referenced in your Rails controllers and actions"
        text_1: "Instead of referencing Rails layouts and views on your controllers, you just use apps and pages as substitutes."
        text_2: "Work with controllers, actions and routing as you're used to! Controller hooks (e.g. devise's authenticate_user) would still work!"
      slide_3:
        heading: "Use CSS animations for fancy page transition animations"
        text_1: "Use matestack's css classes applied to the wrapping DOM structure of a page in order to add CSS animiations, whenever a page transition is performed."
        text_2: "You can even inject a loading state element, enriching your page transition effect."
  landing_page:
    hero:
      title_1: "Your Rails views reimagined"
      title_2: "Boost your productivity & easily create component based web UIs in pure Ruby."
      title_3: "Reactivity included if desired."
      text_1: "Matestack provides a collection of open source gems made for Ruby on Rails developers. Matestack enables you to craft maintainable web UIs in pure Ruby, skipping ERB and HTML. UI code becomes a native and fun part of your Rails app. Thanks to reactive core components, reactivity can be optionally added on top without writing JavaScript, just using a simple Ruby DSL."
      text_2: "You end up writing 50% less code while increasing productivity, maintainability and developer happiness. Work with pure Ruby. If necessary, extend with pure JavaScript. No Opal involved."
    sub_hero:
      title: "Boost your productivity"
      text: "Matestack enables you to define sophisticated UI behavior without touching JavaScript and HTML. You end up writing 50% less code while increasing productivity, maintainability and developer happiness."
    components_examples_section:
      number: 1
      title: "Create UI components in pure Ruby"
      text: "Craft your UI based on your components written in pure Ruby. Utilizing Ruby's amazing language features, you're able to create a cleaner and more maintainable UI implementation."
    reactivity_examples_section:
      number: 2
      title: "Use reactive UI components in pure Ruby"
      text: "What about going even one step further and implement REACTIVE UIs in pure Ruby? Matestack's reactive core components can be used with a simple Ruby DSL enabling you to create reactive UIs without touching JavaScript!"
    spa_examples_section:
      number: 3
      title: "Create whole SPA-like apps in pure Ruby"
      text: "The last step in order to leverage the full Matestack power: Create app (~Rails layout) and page (Rails ~view) classes and implement dynamic page transitions without any JavaScript implementation required."
    features:
      progressive:
        icon: "matestack-code.png"
        title: "Progressive integration"
        text: "Easily integrate Matestack into existing Rails projects. Switch to the fullstack Ruby experience step by step."
      components:
        icon: "matestack-ruby.png"
        title: "Plugable UI components"
        text: "Enjoy saving tons of time by using matestack's growing library of UI components written in pure Ruby."
      extensible:
        icon: "matestack-branches.png"
        title: "Highly extensible"
        text: "Creating custom UI components is as easy as writing Ruby classes or pure Vue.js components"
    support:
      icon: "matestack-maintenance.png"
      title: "Sustainable open source"
      text: "Matestack's core libraries are free and open source - and sustainable open source development requires proper funding. I therefore offer extended in-depth guides, premium support and the Matestack UI addon to GitHub sponsors in order to allow me and potentially a small team to work on Matestack fulltime."
      addon:
        title: "Matestack UI Addon"
        text: "If you like what you saw until now, you might be interested in using the UI addon. <code>matestack-ui-core</code> ships pure functionality without any styles. On top of that, the UI addon <code>matestack-ui</code> ships styled components and app templates enabling you to rapidly create beautiful admin or application UIs. If you’re curious how that looks like, just click the link below!"
        learn_more_cta: "Learn more"
      sponsoring_tiers:
        title: "GitHub sponsoring:"
        tiers:
          supporter:
            title: "Supporter"
            description: "You simply want to support the project and expect nothing in return. Thank you, mate!"
            included_items: []
            price_per_month: "9 $/month"
          solo_dev:
            title: "Solo Developer"
            description: "You use Matestack as a solo developer and want even more sugar. With this tier you get:"
            included_items:
              - "Access to a private Discord channel"
              - "Access to the Matestack UI addon"
              - "Access to advanced in-depth guides (coming soon)"
            price_per_month: "19 $/month"
          startup:
            title: "Startup"
            description: "You use Matestack in your startup in a team of 1-10 developers and want to boost your performance even more. With this tier you get:"
            included_items:
              - "Everything from \"Solo Developer\""
              - "Priorotized GitHub issue processing"
              - "Small logo on GitHub project page & this website"
            price_per_month: "99 $/month"
          business:
            title: "Business"
            description: "You use Matestack in your business in a team of 11-20 developers and can imagine how matestack's support and extendend guides would provide greate value to your team. With this tier you get:"
            included_items:
              - "Everything from \"Startup\""
              - "Medium sized logo on GitHub project page & this website"
              - "1 hour expert consulting per month"
            price_per_month: "299 $/month"
          enterprise:
            title: "Big Business"
            description: "You use Matestack in your business in a team of 20+ developers and know what a 50% decrease of UI development effort means to your budgets. With this plan you get:"
            included_items:
              - "Everything from \"Startup\""
              - "Large logo on GitHub project page & this website"
              - "Logo & description text in the documentation"
              - "2 hours expert consulting per month"
            price_per_month: "499 $/month"
    addons:
      title: "Add-ons for sponsors"
      text_1: "In addition to our open source projects, we provide our sponsors with various add-ons in order to further increase their productivity."
      text_2: "Currently we work on a bootstrap add-on, giving you the possibility to use bootstrap components without writing all the DOM structure and CSS classes. Just use some lines of pure Ruby to get all what bootstrap has to offer. With this addon, you are able to create beautiful web apps even faster!"
      cta_text: "Coming soon"
    indepth_guides:
      title: "Extendend know-how for sponsors"
      text_1: "On top of our comprehensive and growing documentation, we will offer our sponsors written guides about advanced topics."
      text_2: "Currently we work on guides covering topics such as: 'handling multilanguage apps', 'creating mutlistep forms' and more!"
      cta_text: "Coming soon"
    services:
      icon: "matestack-support.png"
      title: "Let's succeed together"
      text: "We would love to help you succeed with our technology. We can help you in various ways."
      book_cta_text: "Book now"
      service_types:
        title: "My services around Rails and Matestack:"
        types:
          workshop:
            title: "Workshop"
            description: "You'd like to start using Matestack in your business, but need help to get things going and bring your team up to speed? I'm there for you!"
          support:
            title: "Support on demand"
            description: "You're already using Matestack but need support on specific issues? Just hire me to help you out efficiently!"
          development:
            title: "Development on demand"
            description: "You want me to join your development team for some time? Great Idea! I'm happy to work on your projects! Just Ruby/Rails or Matestack on top. You decide!"
          refactoring:
            title: "Refactoring"
            description: "You need me to refactor some bulky legacy views and turn them into future proof, maintainable Ruby code? I love this challenge!"
          turnkey:
            title: "Turnkey applications"
            description: "Concept and fundig are there, and you \"only\" need developers/a development team to build the applications? I'm more than happy to do so! Both handover and ongoing support possible. If necessary I can team up with my partner in order to provide more ressources!"
    team:
      title: "A team full of mates ready to boost your productivity"
      core_contributors: "+27 core contributors"
      join_team_cta: "Join the team!"
      members:
        jonas:
          img_path: "team/jonas.png"
          name: "Jonas Jabari"
          twitter_handle: "@jonasjabari"
          role: "Senior Ruby/JavaScript developer, creator and founder of matestack"
          description: "\"While being a solo developer, I often struggled with the growing complexity of web development. I created Matestack to get things done easier, faster and more sustainable. After some time, I decided to publish my work and now look forward to grow this project through open source!\""
        nils:
          name: "Nils Henning"
          img_path: "team/nils.png"
          role: "Partner, Senior Ruby/JavaScript developer"
          description: "tbd"
        pascal:
          name: "Pascal Wengerter"
          img_path: "team/pascal.png"
          role: "Partner, Ruby developer"
          description: "tbd"
        andreas:
          name: "Andreas Eiselt"
          img_path: "team/andreas.jpeg"
          role: "Partner, Data scientist and senior Ruby/JavaScript developer"
          description: "tbd"
    getting_started:
      title: "Jump right in!"
      request_help_cta: "Request help"
      weekly_qa_1: "Q/A Session Tuesday 10 AM CET"
      weekly_qa_2: "Q/A Session Thursday 6 PM CET"
      getting_started_cta: "Getting started"
      github_stars: "450+"
      github_stars_text: "GitHub Stars"
      version: "1.3.2"
      version_text: "Version"
      licencse: "LGPLv3"
      licencse_text: "License"
    newsletter:
      title: "Sign up to Matestack's newsletter"
      description: "I occasionally will send you news about updates on Matestack's technology, new content and related information. Your data will only be stored on Matestack's servers without any thirdparty service involved!"
      form:
        title: "Want to keep updated?"
        name_label: "Name"
        email_label: "Email"
        submit_text: "submit"
        success_heading: "Subscription requested!"
        success_description: "Please confirm your subscription using the link given in the email just beeing sent you."
  addons:
    hero:
      title_1: "Create beautiful, flexible Application & Admin UIs in pure Ruby"
      title_2: "Matestack UI ships styled UI components and smart CRUD tools for maximum productivity"
      text_1: "How about putting together prebuilt styled components in pure Ruby rather than configuring something like ActiveAdmin? You can reuse existing security policies and unique business logic while rapidly implementing beautiful admin or application UIs!"
      text_2: "Just like Matestack's core library <code>matestack-ui-core</code>, the addon library <code>matestack-ui</code> can be seamlessly integrated on top of existing controllers, models, routes and authentication/authorisation policies. Use solid UI abstraction while not compromising on the flexibility you need to drive your business!"
    bootstrap:
      access:
        text_1: "Matestack UI provides extra value on top of the open source project and is available for GitHub sponsors."
        text_2: "You will get a key which can be used in your Gemfile in order to install the gem."
        cta: "Get it now!"
      preview:
        title: "Live Preview"
        text_1: "Below you find a link to a dummy application built with matestack-ui."
        cta: "Check it out!"
      features:
        progressive:
          icon: "matestack-code.png"
          title: "Progressive integration"
          text: "Just like matestack-ui-core, easily integrate matestack-ui into existing Rails projects. Integrate bootstrap components step by step."
        flexible:
          icon: "matestack-ruby.png"
          title: "Flexible abstraction"
          text: "Unlike other admin UI gems, you can use solid abstraction while still being able to implement and reuse your business logic without being bound to a configuration-only approach!"
        customize:
          icon: "matestack-branches.png"
          title: "Tailor to your usecase"
          text: "Besides styling customizations, you are completely free to integrate the components into your individual workflows, security polcies and data structures."
      admin_templates:
        title: "Flexible, responsive, prebuilt app layouts"
        text_1: "Use our prebuilt app templates through class inheritance in order to quickly setup typical layouts including sidebar and header navigation. Styles can be customized via SCSS theming."
        text_2: "Thanks to the fact that you're dealing with pure Ruby classes, it's also pretty easy to modify prebuilt UI structures and appearance in order to tailor the admin app to your individual needs."
      page_layout_components:
        title: "Powerful page layout components for great UI experience"
        text_1: "User components like `page_heading` or `section_card` together with grid components like `row` and `col` in order to quickly create a well structured, consistent and good looking UI."
        text_2: "Split rendering of complex, data-intesive UIs with Matestack's core `async` component and increase initial page load performance dramatically! All without writing one line of JavaScript."
      chart_components:
        title: "Chart.js components accessible in pure Ruby"
        text_1: "Want to visualize some data in charts? Matestack UI integrates chart.js and allows you to use chart components in pure Ruby without thinking of the JavaScript side!"
        text_2: "Choose from `line`, `doughnut`, `bar` or `pie` charts and use theme colors for consistent coloring of datasets without touching CSS."
      smart_collections_table:
        title: "Reactive, paginated, filterable tables, without the JavaScript hussle"
        text_1: "Implementing a paginated, filterable collection is exhausting. And what about a reactivity when switching through the pages in order to avoid full page reloads? You don't want to build that yourself! That's why we've created the `collection` component, shipped within matestack-ui-core. The `smart_collection` shipped with `matestack-ui` gives you even more:"
        text_2: "A few lines of Ruby is enough to add a styled, reactive paginated table with filters to your UI! You can optionally modify column rendering and per-row actions via method injection."
      smart_collections_card:
        title: "Customized collection rendering, if tables are not enough"
        text_1: "You like, what the `smart_collection` does, but want to render something different than a table? No worries: you can inject your very own method, rendering the collection items."
        text_2: "In this example we're using our own `collection_rendering` method in order to render cards in a grid rather than displaying a table. All other features of a `smart_collections` are still working."
      smart_forms:
        title: "Reactive forms in no time"
        text_1: "Matestack's core library already ships reactive forms, used with pure Ruby. Within matestack-ui you get styled form component, enabling you to create beautiful, reactive forms with a few lines of Ruby!"
        text_2: "Create styled forms, with reactive error/success rendering without thinking of any implementation detail!"
      bootstrap_components:
        title: "All Bootstrap v5 components, available in pure Ruby"
        text_1: "Alongside smart components, `matestack-ui` ships all Bootstrap v5 components enabling you to use them in pure Ruby."
        text_2: "Imagine adding a Bootstrap `card` component within one line of Ruby, skipping recreating the required DOM structures again and again? Mix that with Matestack's core components, Bootstrap's utility classes or custom CSS for customized UI implementation. That means you're able to use Bootstrap and Matestack UI components with a high level of abstraction for maximum productivity right next to core components like `div` with a lower level of abstraction for maximum flexibility!"
        text_3: "On top of that, you're able to use all kinds of methods in order to render your UI based on conditions like `current_user.is_super_admin?`. Adjusting the UI to your custom rules based on pure Ruby is super easy. That's what we call `flexible abstraction`!"
      pricing:
        title: "Available for GitHub Sponsors"
        request_qa: "Request your personal Q/A session"
        tiers:
          core:
            title: "Matestack UI Core"
            description: "Matestack UI Core ships all you need to build reactive UIs in pure Ruby. You have to take care of styling and additional UI components yourself."
            included_items:
              - "UI components in pure Ruby"
              - "Reactive components in pure Ruby"
              - "Reactive apps in pure Ruby"
              - "Growing documentation and Youtube Screencasts"
              - "Community support"
            price: "Free and Open Source - Start now!"
            cta_link: "https://github.com/matestack/matestack-ui-core"
          ui_addon:
            title: "Matestack UI Addon"
            description: "Matestack UI ships all you need to build beautiful, reactive UIs in pure Ruby and smart CRUD components. Don't think about styling anymore and just create admin or application UIs faster than ever before!"
            included_items:
              - "Everything included in Matestack UI Core, plus:"
              - "Admin and application UI templates in pure Ruby"
              - "Admin and application UI components in pure Ruby"
              - "Styled, reactive forms in pure Ruby"
              - "Styled, reactive date/timepicker in pure Ruby"
              - "Styled, reactive collections in pure Ruby"
              - "Styled, reactive charts in pure Ruby"
              - "All Bootstrap v5 components available in pure Ruby"
              - "Growing library of additional components (Kanban Board, Devise Components...)"
              - "Priorized Support via private Discord channel"
            price: "Available for GitHub sponsors"
            cta_link: "https://github.com/sponsors/matestack"
          onboarding_package:
            title: "Onboarding Service"
            description: "You'd like to start using Matestack UI in your business, but need help to get things going and bring your team up to speed? I'm there for you!"
            included_items:
              - "Personal workshop for your team"
              - "Migrate existing apps to Matestack UI including team onboarding"
              - "Pair programming with your team"
            price: "120 €/h - Book now!"
            cta_link: "mailto: jonas@matestack.io"
          custom_component_dev:
            title: "Custom Component Development"
            description: "You need a component which is not available yet? Matestack can be extended without limitation. I create the missing component for you on a discounted price, if I'm allowed to provide the new component to all Matestack users."
            included_items:
              - "Requirements engineering"
              - "Component development"
              - "Testing and documentation"
              - "Deploy"
            price: "60 €/h (discounted) - Book now!"
            cta_link: "mailto: jonas@matestack.io"
  services:
    hero:
      title_1: "Let's succeed together"
      title_2: "Based in Germany, I'm there for you wherever you are!"
      text_1: "I would love to help you with my expertise around Ruby, JavaScript, Rails, Vue.js, Docker, Testing, CI... and of course: Matestack. You decide if you just need specific support or if I should build whole applications for you. Just Ruby/Rails or Matestack on top! If necessary, I team up with my partners providing you the ressources you need for your project!"
      text_2: "Revenue will be reinvested to fund ongoing Matestack core development, documentation and maintanance."
    case_studies:
      title: "Some of Matestack's projects:"
      abc:
        title: "Booking system for ABC workspaces"
        category: "Turnkey application, web app"
        img_path: "case-studies/abc.png"
        text_1: "In 2019, we we're asked to build a booking system for ABC from scratch. Until then the client managed bookings manually. Hundreds of offices in three cities need to be bookable online. Furthermore the client wanted the booking system to be embedded in a unique homepage design, representing the quality of ABC's services."
        text_2: "Due to individual booking constraint, we've created a custom Rails app and implemented all business logic required managing online bookings together with Stripe payment integration. Additionally we've built a member login enabling the customers of ABC to manage their bookings. Furthermore we've implemented an Admin UI, enabling ABC to manage all bookings and offices. The UI layer was built with matestack-ui-core based on the screendesigns coming from our partner W11 GmbH."
      workey:
        title: "Progressive web app for WORKEY"
        category: "Turnkey application, progressive web app"
        img_path: "case-studies/workey.png"
        text_1: "In 2020, we've created a PWA for WORKEY. Within this app, the user is asked for some feedback concerning the current work environment. The main goal: get to know how to improve the well being of an employee based on feedback."
        text_2: "As it's not to easy to get feedback from employees on a daily basis, the client wanted to offer the employees an installable and enjoyable app. Additionally it was important to remind the employee via push notification to complete the daily questionnaire. We've shipped a PWA based on a Rails application combined with matestack-ui-core."
